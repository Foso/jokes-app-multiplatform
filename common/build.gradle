apply plugin: "com.android.library"
apply plugin: "org.jetbrains.kotlin.multiplatform"
apply plugin: 'kotlinx-serialization'
apply plugin: "com.squareup.sqldelight"

apply from: "../android-shared-dependencies.gradle"

sqldelight {
    JokesDatabase {
        packageName = "com.kurt.jokes"
    }
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"


    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'src/androidMain/AndroidManifest.xml'
            java.srcDirs = ['src/androidMain/kotlin']
            res.srcDirs = ['src/androidMain/res']
        }
    }
}

kotlin {
    targets {
        //select iOS target platform depending on the Xcode environment variables
        def iosPreset = System.getenv("SDK_NAME")?.startsWith("iphoneos") ?
                presets.iosArm64 : presets.iosX64

        fromPreset(iosPreset, 'ios') {
            binaries {
                framework("Common") {
                    if (iosPreset == presets.iosX64) {
                        embedBitcode("disable")
                    }
                }
            }
        }

        android("android")
    }

    sourceSets {
        iosMain {
            dependencies {
                implementation("org.jetbrains.kotlin:kotlin-stdlib")
                implementation("io.ktor:ktor-client-ios:${rootProject.ktorVersion}")
                implementation("io.ktor:ktor-client-serialization-iosx64:${rootProject.ktorVersion}")
                implementation "com.squareup.sqldelight:ios-driver:$sqlDelightVersion"
            }
        }

        commonMain {
            dependencies {
                implementation("org.jetbrains.kotlin:kotlin-stdlib-common")
                implementation("io.ktor:ktor-client-core:${rootProject.ktorVersion}")
                implementation("io.ktor:ktor-client-json:${rootProject.ktorVersion}")
                implementation("io.ktor:ktor-client-serialization:${rootProject.ktorVersion}")
                implementation "com.squareup.sqldelight:runtime:$sqlDelightVersion"
            }
        }
    }
}

dependencies {
    implementation("io.ktor:ktor-client-android:${rootProject.ktorVersion}")
    implementation("io.ktor:ktor-client-okhttp:${rootProject.ktorVersion}")
    implementation("io.ktor:ktor-client-serialization-jvm:${rootProject.ktorVersion}")
    implementation "com.squareup.sqldelight:android-driver:$sqlDelightVersion"
    implementation "com.squareup.sqldelight:android-paging-extensions:$sqlDelightVersion"
    implementation("com.squareup.okhttp3:logging-interceptor:3.14.1")
}

task packForXCode(type: Sync) {
    def targetDir = new File(buildDir, "xcode-frameworks")

    /// selecting the right configuration for the iOS
    /// framework depending on the environment
    /// variables set by Xcode testbuild
    def mode = System.getenv("CONFIGURATION") ?: "DEBUG"
    def framework = kotlin.targets.ios.binaries.getFramework("Common", mode)
    inputs.property("mode", mode)
    dependsOn(framework.linkTask)

    from({ framework.outputDirectory })
    into(targetDir)
}

tasks.build.dependsOn(packForXCode)